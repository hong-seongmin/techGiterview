version: '3.8'

services:
  # Redis Cache (for future caching needs)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API Server - Development Configuration
  backend:
    build: 
      context: ./src/backend
      dockerfile: Dockerfile
      target: development  # Use development stage
    ports:
      - "9104:8002"
    environment:
      - ENV=development
      - DEBUG=true
      - DATABASE_PATH=/app/techgiterview_dev.db
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    # Smart volume mounting strategy
    volumes:
      # Mount source code for development hot-reload, but preserve .venv
      - ./src/backend:/app/src:cached
      - ./src/backend/app:/app/app:cached
      - ./src/backend/main.py:/app/main.py:cached
      # Preserve virtual environment and node_modules equivalent
      - backend_venv:/app/.venv
      # Data directory for SQLite and other persistent data
      - backend_data:/app/data
    # Remove command override - use Dockerfile CMD
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Frontend Vite App
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    ports:
      - "9105:3001"
    environment:
      - VITE_API_URL=http://localhost:9104
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./src/frontend:/app:cached
      - frontend_node_modules:/app/node_modules
    command: npm run dev -- --host 0.0.0.0 --port 3001
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  backend_data:
    driver: local
  backend_venv:
    driver: local
  frontend_node_modules:
    driver: local